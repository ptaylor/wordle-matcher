#!/usr/bin/env python3

import sys
import re
import os

WORD_SIZE = 5
WORDS_PER_LINE = 8
MAX_WORD_SCORES = 5
VOWELS = {'a', 'e', 'i', 'o', 'u', 'y'}
FREQUENCY_SCORE_WEIGHT = 1
REPEAT_SCORE_WEIGHT = 6
VOWEL_SCORE_WEIGHT = 1
MIN_WORDS_TO_SHOW = 2000
SHOW_MATCHING_WORDS = os.environ.get('SHOW_MATCHING_WORDS') == '1'

def read_words(f, size):
    words = []
    with open(f,'r') as word_list:
        for word in word_list:
            word = word.strip()
            if len(word) == size:
                words.append(word)
    return words

def letter_frequency(words):
    frequency = dict()
    for word in words:
        update_letter_frequency(word, frequency)
    return frequency

def update_letter_frequency(word, frequency):
    for letter in word:
        update_frequency(letter, frequency)

def update_frequency(letter, frequency):
    if letter not in frequency:
       frequency[letter] = 0
    frequency[letter] = frequency[letter] + 1

def calculate_percent_histogram(frequency):
    hist = dict()
    total = sum(frequency.values())

    for f in sorted(frequency.values(), reverse = True):
        pc = percent(total, f)
        for word in keys_with_value(frequency, f):
            hist[word] = pc
    return hist

def score_words(words, hist):
    pc_max = max(hist.values())
    scores = dict()

    for word in words:
        scores[word] = score_word(word, hist, pc_max)

    score_min = min(scores.values())
    return {k: v + 1 - score_min for k, v in scores.items()}

def score_word(word, pc_hist, pc_max):
   return frequency_score(word, pc_hist, pc_max) + vowel_score(word) + repeat_score(word)

def frequency_score(word, pc_hist, pc_max):
    score = 0
    for letter in word:
        score = score + (pc_max - pc_hist[letter])
    return score * FREQUENCY_SCORE_WEIGHT

def vowel_score(word):
    return (len(VOWELS) - len(set(word).intersection(VOWELS))) * VOWEL_SCORE_WEIGHT

def repeat_score(word):
    return (len(word) - len(set(word))) * REPEAT_SCORE_WEIGHT


def find_matching(words, pattern):

    reg_exp = make_regexp(pattern)
    matched_words = [w for w in words if re.search(reg_exp, w)]

    all = list(re.sub(r"[^A-Za-z]", '', pattern).lower())
    return [w for w in matched_words if contains(w, all)]

def make_regexp(pattern):
    correct = set(re.sub(r"[^A-Z]", '', pattern))
    misplaced = set(re.sub(r"[^a-z]", '', pattern))

    reg_exp = ""
    for p in pattern:
        if p in correct:
           reg_exp += f"{p.lower()}"
        elif p in misplaced:
           reg_exp += f"[^{p}]"
        else:
           reg_exp += "."

    return reg_exp

def contains(word, letters):

    for letter in letters:
        if letter not in word:
            return False
        word = re.sub(letter, '?', word, count = 1)
    return True


def display_summary(words, pc_hist):
    
    print("")
    print(f"Words: {len(words)}")
    print("")
    print("Letter frequency:")
    values = sorted(set(pc_hist.values()), reverse = True)
    for pc in values:
        if pc > -1:
            words = (", ".join(keys_with_value(pc_hist, pc))).rjust(20)
            width = "#" * int(pc) * 2
            print(f"{words}: {width} {pc}%")
    print("")

def display_scores(scores):

   score_values = sorted(set(scores.values()), reverse = False)

   print("")
   print("Word scores:")
   num = 0;
   for score in score_values:
       if num > MAX_WORD_SCORES:
          break
       num = num + 1
       print(f"{score:20}: ", end = "")
       words = keys_with_value(scores, score)
       count = 0
       for word in words:
           count = count + 1
           print(f"{word} ", end = "")
           if count % WORDS_PER_LINE == 0:
              count = 0
              print("\n                      ", end = "")
       print("")
   print("")


def display_matching(words):

    print("")
    print(f"Found {len(words)} matching words")
    if SHOW_MATCHING_WORDS and len(words) < MIN_WORDS_TO_SHOW:
        count = 0
        for word in words:
            if count % WORDS_PER_LINE == 0:
                print("")
            count = count + 1
            print(f"  {word.upper()}", end = "")
           
        print("")
    print("")

def keys_with_value(m, v):
    return [i for i in m.keys() if m[i] == v]

def percent(max, v):
    return int(round(v * 100 / max, 2))

words = read_words("words.txt", WORD_SIZE)
hist = calculate_percent_histogram(letter_frequency(words))

if len(sys.argv) > 1:
   pattern = sys.argv[1]
   for pattern in sys.argv[1:]:
       if len(pattern) != WORD_SIZE:
          print(f"error: pattern must be {WORD_SIZE} characters")
          sys.exit(1)
       words = find_matching(words, pattern)
   display_matching(words)

else:
    display_summary(words, hist) 
    display_scores(score_words(words, hist))

   
